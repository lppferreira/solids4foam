/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    fluidModel

Description
    Virtual base class for fluid solvers.

Author
    Hrvoje Jasak, Wikki Ltd.  All rights reserved.
    Zeljko Tukovic, FSB Zagreb.  All rights reserved.
    Philip Cardiff, UCD. All rights reserved.

SourceFiles
    fluidModel.C
    newFluidModel.C

\*---------------------------------------------------------------------------*/

#ifndef fluidModel_H
#define fluidModel_H

#include "physicsModel.H"
#include "fvMesh.H"
#include "volFields.H"
#include "surfaceFields.H"
#include "IOdictionary.H"
#include "autoPtr.H"
#include "runTimeSelectionTables.H"
#include "pimpleControl.H"
#include "pisoControl.H"
#ifdef OPENFOAMESI
        #include "gravityMeshObject.H"
#else
    #include "uniformDimensionedFields.H"
#endif
#include "globalPolyPatch.H"
#if FOAMEXTEND > 40
    #include "oversetMesh.H"
#endif


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                           Class fluidModel Declaration
\*---------------------------------------------------------------------------*/

class fluidModel
:
    public physicsModel,
    public IOdictionary
{
    // Private data

        //- Mesh
        autoPtr<dynamicFvMesh> meshPtr_;

        //- Fluid properties dictionary
        dictionary fluidProperties_;

        //- Piso control
        mutable autoPtr<pisoControl> pisoPtr_;

        //- Pimple control
        mutable autoPtr<pimpleControl> pimplePtr_;

        //- Wave properties needed to use waves2Foam
        const IOdictionary waveProperties_;

        //- Gravitional acceleration
#ifdef OPENFOAMESI
        const meshObjects::gravity g_;
#else
        const uniformDimensionedVectorField g_;
#endif

        //- Velocity field header
        IOobject Uheader_;

        //- Pressure field header
        IOobject pheader_;

        //- Velocity field
        volVectorField U_;

        //- Pressure field
        volScalarField p_;

        //- Velocity gradient
        volTensorField gradU_;

        //- Pressure gradient
        volVectorField gradp_;

        //- Flux field
        surfaceScalarField phi_;

        //- Adjustable time-step switch
        const Switch adjustTimeStep_;

        //- For adjustable time-step, this is the maximum Courant number
        const scalar maxCo_;

        //- For adjustable time-step, this is the maximum time-stpe
        const scalar maxDeltaT_;

        //- Pressure minimum bound
        dimensionedScalar pMin_;

        //- Pressure maximum bound
        dimensionedScalar pMax_;

        //- Velocity bound
        dimensionedScalar UMax_;

        //- Small velocity for bounding
        dimensionedScalar smallU_;

        //- Cumulative continuity error
        scalar cumulativeContErr_;

        //- Flag to let the fluid model know that the fsi interface is in charge
        //  of calling fluid mesh.update()
        bool fsiMeshUpdate_;

        //- Flag to let the fluid model if the mesh changed when the FSI
        //  interface called mesh.updated()
        bool fsiMeshUpdateChanged_;

        //- Ptr list of global poly patches
        //  This is a copy of a patch which is reconstructed in full on each
        //  processor. This is convenient for interpolating between two patches
        //  in parallel, as used, for example, in the fluid-solid interaction
        //  procedure
        mutable PtrList<globalPolyPatch> globalPatchesPtrList_;


    // Private Member Functions

        //- Make the pimple control
        void makePisoControl() const;
  
        //- Make the pimple control
        void makePimpleControl() const;

        //- Read g field from disk, if it exists, otherwise return zero field
#ifdef OPENFOAMESI
        meshObjects::gravity readG() const;
#else
        uniformDimensionedVectorField readG() const;
#endif

        //- Disallow default bitwise copy construct
        fluidModel(const fluidModel&);

        //- Disallow default bitwise assignment
        void operator=(const fluidModel&);


protected:

    // Protected member functions

        //- Return fluid properties dictionary
        const dictionary& fluidProperties() const
        {
            return fluidProperties_;
        }

        //- Update Robin boundary conditions, if found
        void updateRobinFsiInterface
        (
            const volScalarField& p,
            const volVectorField& U,
            surfaceScalarField& phi,
            surfaceScalarField& rAUf
        );

        //- Calculate the Courant number
        void CourantNo(scalar& CoNum, scalar& meanCoNum, scalar& velMag) const;

        //- Calculate the Courant number
        void CourantNo() const;

#if FOAMEXTEND > 40
        //- Calculate the Courant number
        void oversetCourantNo
        (
            scalar& CoNum, scalar& meanCoNum, scalar& velMag
        ) const;

        //- Calculate the Courant number
        void oversetCourantNo() const;
#endif

        //- Continuity errors
        void continuityErrs();

#if FOAMEXTEND > 40
        //- Continuity errors
        void oversetContinuityErrs();
#endif

        //- Bound the pressure and velocity fields
        void boundPU
        (
            volScalarField& p,
            volVectorField& U
        ) const;


public:

    //- Runtime type information
    TypeName("fluidModel");


    // Declare run-time constructor selection table

        declareRunTimeSelectionTable
        (
            autoPtr,
            fluidModel,
            dictionary,
            (
                Time& runTime,
                const word& region
            ),
            (runTime, region)
        );


    // Constructors

        //- Construct from components
        fluidModel
        (
            const word& type,
            Time& runTime,
            const word& region = dynamicFvMesh::defaultRegion
        );


    // Selectors

        //- Select constructed from mesh
        static autoPtr<fluidModel> New
        (
            Time& runTime, const word& region = "region0"
        );


    // Destructor

        virtual ~fluidModel();


    // Member Functions

        // Access

            //- Return reference to the mesh
            dynamicFvMesh& mesh()
            {
                return meshPtr_();
            }

            //- Return const reference to the mesh
            const dynamicFvMesh& mesh() const
            {
                return meshPtr_();
            }

            //- Return time
            const Time& runTime() const
            {
                return meshPtr_().time();
            }

            //- Return non-const acess to the pimple control
            pisoControl& piso();
  
            //- Return non-const acess to the pimple control
            pimpleControl& pimple();

#if FOAMEXTEND > 40
            //- Return non-const acess to the overset mesh
            const oversetMesh& osMesh() const;
#endif

            //- Return const gravity field
#ifdef OPENFOAMESI
            virtual const meshObjects::gravity& g() const
#else
            virtual const uniformDimensionedVectorField& g() const
#endif
            {
                return g_;
            }

            //- Return const velocity field
            virtual const volVectorField& U() const
            {
                return U_;
            }

            //- Return velocity field
            virtual volVectorField& U()
            {
                return U_;
            }

            //- Return const pressure field
            virtual const volScalarField& p() const
            {
                return p_;
            }

            //- Return pressure field
            virtual volScalarField& p()
            {
                return p_;
            }

            //- Return const temperature field
            virtual const volScalarField& T() const
            {
                notImplemented("fluidModel::T() const");
                return volScalarField::null();
            }

            //- Return temperature field
            virtual volScalarField& T()
            {
                notImplemented("fluidModel::T()");
                return const_cast<volScalarField&>(volScalarField::null());
            }

            //- Return const velocity gradient field
            virtual const volTensorField& gradU() const
            {
                return gradU_;
            }

            //- Return velocity gradient field
            virtual volTensorField& gradU()
            {
                return gradU_;
            }

            //- Return const pressure gradient field
            virtual const volVectorField& gradp() const
            {
                return gradp_;
            }

            //- Return pressure gradient field
            virtual volVectorField& gradp()
            {
                return gradp_;
            }

            //- Return const reference to flux field
            virtual const surfaceScalarField& phi() const
            {
                return phi_;
            }

            //- Return reference to flux field
            virtual surfaceScalarField& phi()
            {
                return phi_;
            }

            //- Non-const access to the fsiMeshUpdate flag
            virtual bool& fsiMeshUpdate()
            {
                return fsiMeshUpdate_;
            }

            //- Non-const access to the fsiMeshUpdateChanged flag
            virtual bool& fsiMeshUpdateChanged()
            {
                return fsiMeshUpdateChanged_;
            }

            //- Patch viscous force (N/m2)
            virtual tmp<vectorField> patchViscousForce
            (
                const label patchID
            ) const = 0;

            //- Patch pressure force (N/m2)
            virtual tmp<scalarField> patchPressureForce
            (
                const label patchID
            ) const = 0;

            //- Patch heat flux (W/m2)
            virtual tmp<scalarField> patchHeatFlux
            (
                const label patchID
            ) const
            {
                notImplemented("fluidModel::patchHeatFlux() const");
                return tmp<scalarField>(new scalarField());
            }

            //- Patch temperature (K)
            virtual tmp<scalarField> patchTemperature
            (
                const label patchID
            ) const
            {
                notImplemented("fluidModel::patchTemperature() const");
                return tmp<scalarField>(new scalarField());
            }

            //- Patch kappa*delta
            virtual tmp<scalarField> patchKappaDelta
            (
                const label patchID
            ) const
            {
                notImplemented("fluidModel::patchKappaDelta() const");
                return tmp<scalarField>(new scalarField());
            }

            //- Face zone viscous force (N/m2)
            virtual tmp<vectorField> faceZoneViscousForce
            (
                const label interfaceI
            ) const;

            //- Face zone pressure force (N/m2)
            virtual tmp<scalarField> faceZonePressureForce
            (
                const label interfaceI
            ) const;

            //- Face zone heat flux (W/m2)
            virtual tmp<scalarField> faceZoneHeatFlux
            (
                const label interfaceI
            ) const;

            //- Face zone temperature (K)
            virtual tmp<scalarField> faceZoneTemperature
            (
                const label interfaceI
            ) const;

            //- Face zone kappa*delta
            virtual tmp<scalarField> faceZoneKappaDelta
            (
                const label interfaceI
            ) const;

            //- This function will check that the U field was read from disk
            virtual void UisRequired();

            //- This function will check that the p field was read from disk
            virtual void pisRequired();

            //- Make the global poly patches
            void makeGlobalPatches(const wordList& patchNames) const;

            //- Return const-access to the global poly patches
            const PtrList<globalPolyPatch>& globalPatches() const;

            //- Clear global poly patches
            void clearGlobalPatches() const;

        // Edit

            //- Update the size of the time-step
            virtual void setDeltaT(Time& runTime);

            //- Set temperature and flux at specified patch
            virtual void setTemperature
            (
                const label patchID,
                fvPatchScalarField& temperaturePatch,
                const scalarField& temperature,
                const scalarField& kappaDelta
            );

            //- Set temperature and flux at specified patch
            virtual void setTemperature
            (
                const label interfaceI,
                const label patchID,
                const scalarField& nbrFaceZoneTemperature,
                const scalarField& nbrFaceZoneKappaDelta
            );

            //- Evolve the fluid model
            virtual bool evolve() = 0;

            //- Read fluidProperties dictionary
            virtual bool read();

            //- Write fields
            virtual void writeFields(const Time& runTime);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
