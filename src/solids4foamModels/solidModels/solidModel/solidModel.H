/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    solidModel

Description
    Virtual base class for solid mechanics models

Author
    Zeljko Tukovic, FSB Zagreb.  All rights reserved.
    Philip Cardiff, UCD. All rights reserved.

SourceFiles
    solidModel.C
    newSolidModel.C

\*---------------------------------------------------------------------------*/

#ifndef solidModel_H
#define solidModel_H

#include "dynamicFvMesh.H"
#include "IOdictionary.H"
#include "autoPtr.H"
#include "runTimeSelectionTables.H"
//#include "mechanicalLaw.H"
#include "mechanicalModel.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                           Class solidModel Declaration
\*---------------------------------------------------------------------------*/

class solidModel
:
    public IOdictionary
{
    // Private data

        //- Non-const reference to mesh
        dynamicFvMesh& mesh_;

        //- Solid properties dictionary
        dictionary solidProperties_;

        //- Mechanical model
        mechanicalModel mechanical_;

    // Private Member Functions

        //- Disallow default bitwise copy construct
        solidModel(const solidModel&);

        //- Disallow default bitwise assignment
        void operator=(const solidModel&);


protected:

    // Protected member functions

        //- Return solid properties dictionary
        dictionary& solidProperties()
        {
            return solidProperties_;
        }

        //- Return mechanical model
        mechanicalModel& mechanical()
        {
            return mechanical_;
        }

public:

    //- Runtime type information
    TypeName("solidModel");


    // Declare run-time constructor selection table

        declareRunTimeSelectionTable
        (
            autoPtr,
            solidModel,
            dictionary,
            (
                dynamicFvMesh& mesh
            ),
            (mesh)
        );


    // Constructors

        //- Construct from components
        solidModel
        (
            const word& type,
            dynamicFvMesh& mesh
        );


    // Selectors

        //- Select constructed from mesh
        static autoPtr<solidModel> New(dynamicFvMesh& mesh);


    // Destructor

        virtual ~solidModel();


    // Member Functions

        // Access

            //- Return mesh
            const dynamicFvMesh& mesh() const
            {
                return mesh_;
            }

            //- Return non-const mesh
            dynamicFvMesh& mesh()
            {
                return mesh_;
            }

            //- Return time
            const Time& runTime() const
            {
                return mesh_.time();
            }

            //- Return solid properties dictionary
            const dictionary& solidProperties() const
            {
                return solidProperties_;
            }

            //- Return mechanical model
            const mechanicalModel& mechanical() const
            {
                return mechanical_;
            }

            //- Patch displacement increment
            virtual tmp<vectorField> patchDisplacementIncrement
            (
                 const label patchID
            ) const
            {
                FatalErrorIn
                (
                    "virtual tmp<vectorField> patchDisplacementIncrement\n"
                    "(\n"
                    "    const label patchID\n"
                    ") const"
                )   << "WIP: not implemented for all solidsModels in of30 (yet)"
                    << abort(FatalError);

                // Keep compiler happy
                return tmp<vectorField>(new vectorField(0));
            }


        // Edit

            //- Set traction at specified patch
            virtual void setTraction
            (
                const label patchID,
                const vectorField& traction
            ) = 0;

            //- Set traction at specified patch
            virtual void setPressure
            (
                const label patchID,
                const scalarField& pressure
            ) = 0;

            //- Evolve the solid model
            virtual bool evolve() = 0;

            //- Traction boundary surface normal gradient
            //  Given the user-specified boundary patch traction, this function
            //  should return the surface normal gradient
            //  This function is used by traction-type boundary conditions to
            //  set the boundary gradient
            virtual tmp<Foam::vectorField> tractionBoundarySnGrad
            (
                const vectorField& traction,
                const scalarField& pressure,
                const fvPatch& patch
            ) const = 0;

            //- Update total accumulated fields
            virtual void updateTotalFields() = 0;

            //- Write fields
            virtual void writeFields(const Time& runTime);

            //- End of the program
            virtual void end()
            {}

            //- Read solidProperties dictionary
            virtual bool read();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
