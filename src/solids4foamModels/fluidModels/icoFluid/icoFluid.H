/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    icoFluid

Description
    icoFoam fluid model

Author
    Hrvoje Jasak, Wikki Ltd.  All rights reserved.
    Zeljko Tukovic, FSB Zagreb.  All rights reserved.
    Philip Cardiff, UCD. All rights reserved.

SourceFiles
    icoFluid.C

\*---------------------------------------------------------------------------*/

#ifndef icoFluid_H
#define icoFluid_H

#include "fluidModel.H"
#include "volFields.H"
#include "pointFields.H"
#include "surfaceFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace fluidModels
{

/*---------------------------------------------------------------------------*\
                        Class icoFluid Declaration
\*---------------------------------------------------------------------------*/

class icoFluid
:
    public fluidModel
{
    // Private data

        //- Velocity field
        volVectorField U_;

        //- Point mesh
        pointMesh pMesh_;

        //- Point displacement field
        pointVectorField pointD_;

        //- Pressure field
        volScalarField p_;

        //- Gradient of pressure field
        volVectorField gradp_;

        //- Flux field
        surfaceScalarField phi_;

        // Transport properties dictionary
        IOdictionary transportProperties_;

        //- Kinematic viscosity
        dimensionedScalar nu_;

        //- Density
        dimensionedScalar rho_;


    // Private Member Functions

        //- Disallow default bitwise copy construct
        icoFluid(const icoFluid&);

        //- Disallow default bitwise assignment
        void operator=(const icoFluid&);


public:

    //- Runtime type information
    TypeName("icoFluid");


    // Constructors

        //- Construct from components
        icoFluid(const fvMesh& mesh);


    // Destructor

        virtual ~icoFluid()
        {}


    // Member Functions

        // Access

            //- Return velocity field
            virtual const volVectorField& U() const;

            //- Return velocity field
            volVectorField& U()
            {
                return U_;
            }

            //- Return pressure field
            virtual const volScalarField& p() const;

            //- Return pressure field
            volScalarField& p()
            {
                return p_;
            }

            //- Return pressure gradient
            volVectorField& gradp()
            {
                return gradp_;
            }

            //- Return const reference to flux field
            virtual const surfaceScalarField& phi() const
            {
                return phi_;
            }

            //- Return reference to flux field
            virtual surfaceScalarField& phi()
            {
                return phi_;
            }

            //- Return kinematic viscosity
            const dimensionedScalar& nu() const
            {
                return nu_;
            }

            //- Density
            const dimensionedScalar& rho()
            {
                return rho_;
            }

            // //- Patch viscous force (N/m2)
             virtual tmp<vectorField> patchViscousForce
             (
                 const label patchID
             ) const;

            // //- Patch pressure force (N/m2)
             virtual tmp<scalarField> patchPressureForce
             (
                 const label patchID
             ) const;

            // //- Patch viscous force (N/m2)
             virtual tmp<vectorField> faceZoneViscousForce
             (
                 const label zoneID,
                 const label patchID
             ) const;

            // //- Patch pressure force (N/m2)
             virtual tmp<scalarField> faceZonePressureForce
             (
                 const label zoneID,
                 const label patchID
             ) const;

            // //- Face zone effective dynamic viscosity
             virtual tmp<scalarField> faceZoneMuEff
             (
                 const label zoneID,
                 const label patchID
             ) const;

            //- Return point displacement field
             virtual const pointVectorField& pointD() const
             {
                 return pointD_;
             }

            //- Face zone primitive patch in current configuration
             virtual tmp<vectorField> currentFaceZonePoints
             (
                 const label zoneID
             ) const;

        // Edit

            //- Evolve the fluid model
            virtual void evolve();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace fluidModels
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
