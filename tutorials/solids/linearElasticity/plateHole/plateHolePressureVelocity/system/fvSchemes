/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.0                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

d2dt2Schemes
{
    default            steadyState;
}

ddtSchemes
{
    default            steadyState;
}

gradSchemes
{
    default            extendedLeastSquares 0;
}

divSchemes
{
    default            none;
    div(dev(sigma))    Gauss linear;
    div((((2*mu)*deltaT)*grad(U))) Gauss linear;
    div(((rho*(1|A(U)))*grad(p))) Gauss skewCorrected linear;
    div((S&interpolate((((rho*(1|A(U)))|k)*H(U)))),p) Gauss skewCorrected linear;
    div(((rho*(1|A(U)))*H(U))) Gauss skewCorrected linear;
    //div((S&interpolate((((rho*(1|A(U)))|k)*H(U)))),p) Gauss upwind;
}

laplacianSchemes
{
    default           Gauss linear newSkewCorrected 1;
    laplacian(DD,D)    Gauss linear newSkewCorrected 1;
    laplacian(U)       Gauss linear newSkewCorrected 1;
    laplacian(DDD,DD)  Gauss linear newSkewCorrected 1;
}

snGradSchemes
{
    default            none;
    snGrad(D)          newSkewCorrected 1;
    snGrad(DD)         newSkewCorrected 1;
}

interpolationSchemes
{
    default            none;
    interpolate(impK)  linear;
    interpolate(grad(D)) linear;
    interpolate(U) linear;
    interpolate(grad(U)) linear;
    interpolate((((rho*(1|A(U)))|k)*H(U))) skewCorrected linear;
}

// ************************************************************************* //
