/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.2                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      D;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    topBrickUp
    {
        type            fixedDisplacement;
        displacementSeries
        {
            "fileName|file"        "$FOAM_CASE/constant/timeVsTopDisp";
            outOfBounds     clamp;
        }
        value           uniform (0 0 0);
    }

    bottomBrickDown
    {
        type            fixedDisplacement;
        value           uniform (0 0 0);
    }

    topBrickDown
    {
        type            solidContact;
        master          yes;
        rigidMaster     no;
        shadowPatch     bottomBrickUp;
        normalContactModel standardPenalty;
        standardPenaltyNormalModelDict
        {
            relaxationFactor 0.01;
            penaltyScale     1;
        }
        //frictionContactModel frictionless;
        frictionContactModel standardPenalty;
        standardPenaltyFrictionModelDict
        {
            relaxationFactor  0.01;
            penaltyScale      1;
            frictionLaw       coulomb;
            frictionLawDict
            {
                frictionCoeff 0.1;
            }
        }
        value           uniform (0 0 0);
    }

    bottomBrickUp
    {
        type            solidContact;
        shadowPatch     topBrickDown;
        master          no;
        value           uniform (0 0 0);
    }

    bottomBrickLeft
    {
        type            solidTraction;
        traction        uniform ( 0 0 0 );
        pressure        uniform 0;
        value           uniform (0 0 0);
    }

    bottomBrickRight
    {
        type            solidTraction;
        traction        uniform ( 0 0 0 );
        pressure        uniform 0;
        value           uniform (0 0 0);
    }
    topBrickLeft
    {
        type            solidTraction;
        traction        uniform ( 0 0 0 );
        pressure        uniform 0;
        value           uniform (0 0 0);
    }
    topBrickRight
    {
        type            solidTraction;
        traction        uniform ( 0 0 0 );
        pressure        uniform 0;
        value           uniform (0 0 0);
    }
    back
    {
        type            empty;
    }
    front
    {
        type            empty;
    }
}

// ************************************************************************* //
